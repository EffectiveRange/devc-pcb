#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2024 Ferenc Nandor Janky <ferenj@effective-range.com>
# SPDX-FileCopyrightText: 2024 Attila Gombos <attila.gombos@effective-range.com>
# SPDX-License-Identifier: MIT

from dataclasses import dataclass
from typing import Optional
import pandas as pd
from lxml import etree
import argparse


@dataclass(frozen=True, order=True)
class Component:
    refdes: str
    value: str
    mpn: str
    manufacturer: str
    supplier_link: str = ""


def get_property(node, key: str, required=False) -> str:
    """
    Retrieves the value of a property from a given XML node.

    Args:
        node (Element): The XML node to search for the property.
        key (str): The name of the property to retrieve.
        required (bool, optional): Specifies whether the property is required. Defaults to False.

    Returns:
        str: The value of the property.

    Raises:
        ValueError: If the property is not found and is required.
    """
    for child in node.getchildren():
        if child.tag == "property" and child.get("name") == key:
            val: str = child.get("value")
            return val
    if not required:
        return ""
    raise ValueError(f"Property {key} not found in {node.get('ref')}")


def get_value(node) -> str:
    """
    Retrieves the value from the given node.

    Args:
        node: The XML node to extract the value from.

    Returns:
        The extracted value as a string.

    Raises:
        ValueError: If the value node is not found in the given node.
    """
    val_node = node.find("value")
    if val_node is None:
        raise ValueError(f"Value not found in {node}")
    return val_node.text


def node_to_component(node, key: str) -> Component:
    return Component(
        node.get("ref"),
        get_value(node),
        *[
            get_property(node, k, r)
            for k, r in ((key, True), ("Manufacturer", False), ("SupplierLink", False))
        ],
    )


def join_by_refdes_and_value(d: pd.DataFrame):
    qty = pd.Series({"qty": d.count()["refdes"]}, ["qty"])
    refs: pd.Series = d[["refdes"]].apply(",".join, axis=0)
    cols = list(d.columns)
    cols.remove("refdes")
    rest = d[cols]
    vg = rest.groupby(by="value")
    # only allowed multi value for Connector/Jumper components
    if len(vg) != 1:
        if not d[["refdes"]].apply(lambda s: s[0].startswith("J"), axis=1).all():
            raise ValueError(f"Multiple values for attributes of {refs} ")
    return pd.concat((refs, qty, rest.iloc[0]))


def main():
    args = get_args()
    df = get_components(args)
    components_per_product_number = df.groupby(by=["mpn"], group_keys=False)
    result = components_per_product_number.apply(join_by_refdes_and_value)
    result = result.sort_values(by=["refdes"])
    out_func, ext = (
        (lambda p: result.to_excel(p, index=False), ".xlsx")
        if args.xlsx
        else (lambda p: result.to_csv(p, index=False), ".csv")
    )
    out_func(f"{args.output}{ext}")


def get_components(args):
    bom = etree.parse(args.bomxml, None)
    components_node = bom.find("components")
    comps = [
        node_to_component(n, args.mpn_col)
        for n in (node for node in components_node.getiterator() if node.tag == "comp")
    ]
    df = pd.DataFrame(comps)
    return df


def get_args():
    parser = argparse.ArgumentParser(
        description="Generate BOM from XML file",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "bomxml",
        help="XML bom file generated by kicad-cli",
        type=argparse.FileType(encoding="UTF-8"),
    )
    parser.add_argument(
        "-o", "--output", help="Path to output file without extension", default="out"
    )
    parser.add_argument(
        "--mpn-col",
        help="Name of the column that contains the MPN(Manufacturer Product Number)",
        default="MPN",
    )
    mg = parser.add_mutually_exclusive_group()
    mg.add_argument(
        "--xlsx", help="Output in xlxs format (default)", action="store_true"
    )
    mg.add_argument("--csv", help="Output in csv format", action="store_true")
    args = parser.parse_args()
    if not args.xlsx and not args.csv:
        args.xlsx = True
    return args


if __name__ == "__main__":
    main()
